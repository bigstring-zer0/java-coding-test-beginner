package array;

import java.io.IOException;

public class 임시_반장_정하기 {
    public static int solution(int n, int[][] arr) {
        int answer = 0;
        int cnt;
        int maxVal = Integer.MIN_VALUE;

        // i 번째 학생을 기준으로하여 i번째 학생을 제외한 나머지 j번째 학생들의 학년 정보를 탐색
        // i 번째 학생 정하기
        for (int i = 0; i < n; i++) {
            cnt = 0;
            // 기준 학생인 i 번째 학생과 비교하기 위한 j 번째 학생 정하기
            for (int j = 0; j < n; j++) {
                // i 와 j가 같은 경우는 자기 자신을 탐색하는 것이므로
                // i와 j가 다를때만 학년별 반정보에 대한 탐색 시작
                if (i != j) {
                    // i와 j 학생을 정하고 i와 j의 학년별 반정보 탐색 시작
                    for (int k = 0; k < 5; k++) {
                        // 만약 i번째 학생의 k학년 반과 j번째 학생의 k학년 반이 같다면
                        if (arr[i][k] == arr[j][k]) {
                            // i와 j는 한번이라도 같은 반이 된 적이 있으므로 cnt값 1증가
                            cnt++;
                            // i번째 학생과 j번째 학생이 몇번 같은 반이 되었는가를 계산하는 것이 아니라
                            // i번째 학생과 j번째 학생이 한번이라도 같은 반이 된적이 있는지를 계산하는 것이므로
                            // 탐색을 진행하다가 같은 반이 된적이 있다는걸 알았다면 더이상 i번째 학생과
                            // j번째 학생이 다른 학년에서도 같은반이 된적이 있는지 탐색할 필요가 없다.
                            // i번째 학생과 j번째 학생의 학년별 반정보 탐색 종료
                            break;
                        }
                    }
                }
            }
            // 다음 i번째 학생에 대한 탐색을 하기전에 해당 i번째 학생의 탐색이 종료되었다면,
            // 현재 기준의 학생과 다른 학생들이 한번이라도 같은 반이 된적이 있는 횟수와
            // 이때까지 탐색을 하면서 i번째 학생이 다른 학생들과 한번이라도 같은 반이 된적이 있는 최대 횟수와 비교하여
            // 현재 기준의 학생의 다른 학생과 같은반이 된적있는 횟수가 더 많다면,
            if (cnt > maxVal) {
                // 현재 기준 학생의 다른 학생과 같은반이 된적있는 횟수를 최대 횟수에 저장한다.
                maxVal = cnt;
                // 다른 학생과 같은반이 된적있는 최대 횟수를 보유한 학생을 찾고 있으므로
                // 학생번호는 1번부터 시작하기에 0부터 시작하는 인덱스 번호에서 1을 더해준 값을 answer에 저장
                answer = i + 1;
            }
        }

        return answer;
    }

    public static void main(String[] args) throws IOException {
        System.out.println(solution(5, new int[][]{
                {2, 3, 1, 7, 3},
                {4, 1, 9, 6, 8},
                {5, 5, 2, 4, 4},
                {6, 5, 2, 6, 7},
                {8, 4, 2, 2, 2},
        }));
    }
}
